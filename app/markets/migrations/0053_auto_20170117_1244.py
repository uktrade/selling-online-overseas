# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2017-01-17 12:44
from __future__ import unicode_literals

from django.db import migrations, models


def migrate_translations(apps, schema_editor):
    TranslationRequirement = apps.get_model('markets', 'TranslationRequirement')
    Market = apps.get_model('markets', 'Market')
    PublishedMarket = apps.get_model('markets', 'PublishedMarket')

    migrations = [
        ['translation_verbal', 'To negotiate with the marketplace'],
        ['translation_application_process', 'To apply to join'],
        ['translation_product_content', 'For product content'],
        ['translation_seller_support', 'For seller support'],
    ]

    for i, item in enumerate(migrations):
        verbose_name = item[1]
        req = TranslationRequirement.objects.create(name=verbose_name, ordering=i)
        item[1] = req

    for market in Market.objects.all():
        requirements = []

        for item in migrations:
            if getattr(market, item[0], False):
                requirements.append(item[1])

        market.translation_requirements = requirements
        market.translation_notes = market.translation_verbal_notes
        market.save()

        try:
            published_market = PublishedMarket.objects.get(pk=market.pk)
            published_market.translation_requirements = requirements
            published_market.translation_notes = market.translation_verbal_notes
            published_market.save()
        except PublishedMarket.DoesNotExist:
            pass


def migrate_setup(apps, schema_editor):
    SetupRequirement = apps.get_model('markets', 'SetupRequirement')
    Market = apps.get_model('markets', 'Market')
    PublishedMarket = apps.get_model('markets', 'PublishedMarket')

    migrations = [
        ['local_bank_account_needed', 'A local bank account'],
        ['local_incorporation_needed', 'A local company'],
        ['local_return_address_required', 'A local address to handle returns'],
    ]

    for i, item in enumerate(migrations):
        verbose_name = item[1]
        req = SetupRequirement.objects.create(name=verbose_name, ordering=i)
        item[1] = req

    for market in Market.objects.all():
        requirements = []

        for item in migrations:
            if getattr(market, item[0], False):
                requirements.append(item[1])

        market.setup_requirements = requirements
        market.setup_notes = market.local_incorporation_needed_notes
        market.save()

        try:
            published_market = PublishedMarket.objects.get(pk=market.pk)
            published_market.setup_requirements = requirements
            published_market.setup_notes = market.setup_notes
            published_market.save()
        except PublishedMarket.DoesNotExist:
            pass


class Migration(migrations.Migration):

    dependencies = [
        ('markets', '0052_remove_market_published'),
    ]

    operations = [
        migrations.CreateModel(
            name='TranslationRequirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('ordering', models.IntegerField()),
            ],
            options={
                'ordering': ('ordering',),
            },
        ),
        migrations.AddField(
            model_name='market',
            name='translation_requirements',
            field=models.ManyToManyField(blank=True, to='markets.TranslationRequirement'),
        ),
        migrations.AddField(
            model_name='publishedmarket',
            name='translation_requirements',
            field=models.ManyToManyField(blank=True, to='markets.TranslationRequirement'),
        ),
        migrations.AddField(
            model_name='market',
            name='translation_notes',
            field=models.TextField(blank=True, null=True, verbose_name='Notes'),
        ),
        migrations.AddField(
            model_name='publishedmarket',
            name='translation_notes',
            field=models.TextField(blank=True, null=True, verbose_name='Notes'),
        ),
        migrations.CreateModel(
            name='SetupRequirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('ordering', models.IntegerField()),
            ],
            options={
                'ordering': ('ordering',),
            },
        ),
        migrations.AddField(
            model_name='market',
            name='setup_requirements',
            field=models.ManyToManyField(blank=True, to='markets.SetupRequirement'),
        ),
        migrations.AddField(
            model_name='publishedmarket',
            name='setup_requirements',
            field=models.ManyToManyField(blank=True, to='markets.SetupRequirement'),
        ),
        migrations.AddField(
            model_name='market',
            name='setup_notes',
            field=models.TextField(blank=True, null=True, verbose_name='Notes'),
        ),
        migrations.AddField(
            model_name='publishedmarket',
            name='setup_notes',
            field=models.TextField(blank=True, null=True, verbose_name='Notes'),
        ),
        migrations.RunPython(migrate_translations),
        migrations.RunPython(migrate_setup),
    ]
